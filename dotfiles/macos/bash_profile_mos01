# ============================================================================
# Define a CRITICAL environment variable. 
export NTHUB="$HOME/mydocs/Software_Development/noteshub"
export DOTFILES="$NTHUB/dotfiles/macos"
# set horizontal-scroll-mode on # to disable word wrap in terminal; not Working !!

# This will add the code command to your system's PATH, allowing you to open Visual Studio Code from the terminal.
export PATH="$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
# ============================================================================

# It is specific to Git and used by the Git prompt (PS1) script to determine whether to show the dirty state of the working directory.
export GIT_PS1_SHOWDIRTYSTATE=1

# Add `~/bin` to the `$PATH`
export PATH="$HOME/bin:$PATH";

# Order of the list is crical. second script might depend on the first script.
for file in $DOTFILES/{git-completion.bash,git-prompt.sh,git-aliases.bash,aliases,secrets.bash,bash_utils.bash}; do
	[ -r "$file" ] && [ -f "$file" ] && source "$file";
done;
unset file;

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob;

# Append to the Bash history file, rather than overwriting it
shopt -s histappend;

# Autocorrect typos in path names when using `cd`
shopt -s cdspell;

# Enable some Bash 4 features when possible:
# * `autocd`, e.g. `**/qux` will enter `./foo/bar/baz/qux`
# * Recursive globbing, e.g. `echo **/*.txt`
for option in autocd globstar; do
	shopt -s "$option" 2> /dev/null;
done;

# Add tab completion for many Bash commands
if which brew &> /dev/null && [ -f "$(brew --prefix)/share/bash-completion/bash_completion" ]; then
	source "$(brew --prefix)/share/bash-completion/bash_completion";
elif [ -f /etc/bash_completion ]; then
	source /etc/bash_completion;
fi;

# Enable tab completion for `g` by marking it as an alias for `git`
if type _git &> /dev/null && [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
	complete -o default -o nospace -F _git g;
fi;

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
[ -e "$HOME/.ssh/config" ] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2- | tr ' ' '\n')" scp sftp ssh;

# Add tab completion for `defaults read|write NSGlobalDomain`
# You could just use `-g` instead, but I like being explicit
complete -W "NSGlobalDomain" defaults;

# Add `killall` tab completion for common apps
complete -o "nospace" -W "Contacts Calendar Dock Finder Mail Safari iTunes SystemUIServer Terminal Twitter" killall;


# =============================================================================
beautify_prompt
create_alias
establish_symlinks

# =============================================================================
# =============================================================================
# Add pyenv to PATH
export PATH="$HOME/.pyenv/bin:$PATH"
# Initialize pyenv
eval "$(pyenv init --path)"
eval "$(pyenv init -)"
##  pyenv-virtualenv is a plugin for pyenv that facilitates the creation and management of Python virtual environments.
eval "$(pyenv virtualenv-init -)"
# ============================================================================
# Setting PATH for Python 3.9
export PYTHONNOUSERSITE=True # Enable/Disable Python site module ('ENABLE_USER_SITE').
export PYTHONPATH="$HOME/mydocs/Software_Development/Web_Development/aws/boto_scripts:${PYTHONPATH}"
export PYTHONPATH="$HOME/mydocs/Software_Development/noteshub/utils:${PYTHONPATH}"
# ============================================================================

# Add mysql into the PATH variable.
export PATH="/usr/local/mysql/bin:$PATH"
export PATH="/usr/local/Cellar/sqlite/3.45.3/bin:$PATH"

# ============================================================================
######################## PySpark Configurations ##############################
# ============================================================================

# add java into the path variable
export PATH="/usr/local/opt/openjdk@11/bin:${PATH}"
export JAVA_HOME='/usr/local/opt/openjdk@11'

# add java into the path variable
# export PATH="/usr/local/jdk-11.0.23.jdk/Contents/Home/bin:${PATH}"
# export JAVA_HOME='/usr/local/jdk-11.0.23.jdk/Contents/Home'
export SPARK_HOME=/usr/local/spark-3.5.1-bin-hadoop3
export PATH=$SPARK_HOME/bin:$PATH


# export PYSPARK_DRIVER_PYTHON="jupyter"
export PYSPARK_DRIVER_PYTHON="python3"

# Setting PYSPARK_DRIVER_PYTHON_OPTS to "lab" implies that you want to use Jupyter Lab as your Python driver for PySpark. This can be particularly useful if you prefer the Jupyter Lab environment over the classic Jupyter Notebook interface for running PySpark code.
# export PYSPARK_DRIVER_PYTHON_OPTS="lab"

export PYSPARK_PYTHON="/usr/bin/python3"


# This environment variable allows you to specify additional options or arguments to be passed to the Python executable specified by `PYSPARK_DRIVER_PYTHON` when launching the PySpark driver program.
# It is used specifically for configuring options related to the Python environment, such as the IP address, port number, Python version, or any other Python-specific configurations.
# export PYSPARK_DRIVER_PYTHON_OPTIONS="--ip 127.0.0.1 --port 8888"
# ============================================================================

